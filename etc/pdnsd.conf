// pdnsd configuration file.

global {
	perm_cache=16384;
	cache_dir="/var/cache/pdnsd";
#	pid_file = /var/run/pdnsd.pid;
	run_as="nobody";
	server_ip = 127.0.0.1;  # Use eth0 here if you want to allow other
				# machines on your network to query pdnsd.
	status_ctl = on;
#	paranoid=on;       # This option reduces the chance of cache poisoning
	                   # but may make pdnsd less efficient, unfortunately.
	query_method=udp_tcp;
	min_ttl=36h;       # Retain cached entries at least 15 minutes.
	max_ttl=4w;        # One week.
	timeout=10;        # Global timeout option (10 seconds).
	neg_domain_pol=on;
    par_queries=1;
	udpbufsize=1024;   # Upper limit on the size of UDP messages.
}

# The following section is most appropriate if you have a fixed connection to
# the Internet and an ISP which provides good DNS servers.
server {
	label= "opennic";
	#ip = 128.173.89.246,91.191.136.152; #8.8.8.8;  # Put your ISP's DNS-server address(es) here.
	ip = 127.0.0.2;
	proxy_only=on;     # Do not query any name servers beside your ISP's.
	                   # This may be necessary if you are behind some
	                   # kind of firewall and cannot receive replies
	                   # from outside name servers.
	timeout=4;         # Server timeout; this may be much shorter
			   		   # that the global timeout option.
	uptest=if;         # Test if the network interface is active.
	interface=wlan0;   # The name of the interface to check.
	#interval=ontimeout; # Check every 10 minutes.
	purge_cache=off;   # Keep stale cache entries in case the ISP's DNS servers go offline.
	edns_query=yes;    # Use EDNS for outgoing queries to allow UDP messages
			  		   # larger than 512 bytes. May cause trouble with some legacy systems.
}

/*
server {
	label= "tor";
	ip = 127.0.0.1;  # Put your ISP's DNS-server address(es) here.
    port=9053;
	proxy_only=on;     # Do not query any name servers beside your ISP's.
	                   # This may be necessary if you are behind some
	                   # kind of firewall and cannot receive replies
	                   # from outside name servers.
	timeout=4;         # Server timeout; this may be much shorter
			   # that the global timeout option.
	uptest=query;         # Test if the network interface is active.
	interface=wlan0;    # The name of the interface to check.
	 interval=ontimeout;      # Check every 10 minutes.
	purge_cache=off;   # Keep stale cache entries in case the ISP's
			   # DNS servers go offline.
}
*/

/*
# The servers provided by OpenDNS are fast, but they do not reply with
# NXDOMAIN for non-existant domains, instead they supply you with an
# address of one of their search engines. They also lie about the addresses of
# of the search engines of google, microsoft and yahoo.
# If you do not like this behaviour the "reject" option may be useful.
server {
	label = "opendns";
	ip = 208.67.222.222, 208.67.220.220;
	reject = 208.69.32.0/24,  # You may need to add additional address ranges
	         208.69.34.0/24,  # here if the addresses of their search engines
	         208.67.219.0/24; # change.
	reject_policy = fail;     # If you do not provide any alternative server
	                          # sections, like the following root-server
	                          # example, "negate" may be more appropriate here.
	timeout = 4;
	uptest = ping;            # Test availability using ICMP echo requests.
        ping_timeout = 100;       # ping test will time out after 10 seconds.
	interval = 15m;           # Test every 15 minutes.
	preset = off;
}
*/

source {
	owner=localhost;
#	serve_aliases=on;
	file="/etc/hosts";
}
rr {
	name=localhost;
	reverse=on;
	a=127.0.0.1;
	owner=localhost;
	soa=localhost,root.localhost,42,86400,900,86400,86400;
}

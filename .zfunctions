extract() {
    local extract_dir="$( echo "$file_name" | sed "s/\.${1##*.}//g" )"
    for i in "$@" ;do
    case "$1" in
      *.tar.gz|*.tgz        ) tar xzf "$1" ;;
      *.tar.bz2|*.tbz|*.tbz2) tar xjf "$1" ;;
      *.tar.xz|*.txz        ) tar --xz --help &> /dev/null &&
                              tar --xz -xf "$1" ||
                              xzcat "$1" | tar xf - ;;
      *.tar.zma|*.tlz       ) tar --lzma --help &> /dev/null &&
                              tar --lzma -xf "$1" ||
                              lzcat "$1" | tar xf - ;;
      *.tar.lrz) lrzuntar    "$1" ;;
      *.lrz    ) lrunzip     "$1" ;;
      *.tar    ) tar xf      "$1" ;;
      *.gz     ) gunzip      "$1" ;;
      *.bz2    ) bunzip2     "$1" ;;
      *.xz     ) unxz        "$1" ;;
      *.lzma   ) unlzma      "$1" ;;
      *.Z      ) uncompress  "$1" ;;
      *.zip    ) local extract_dir=$(echo $(basename "$1") | sed "s/\.${1##*.}//g")
                 unzip       "$1" -d $extract_dir ;;
      *.rar    ) unrar e -ad "$1" ;;
      *.7z     ) 7za x       "$1" ;;
      *.Z      ) uncompress  "$1" ;;
      *.exe    ) cabextract  "$1" ;;
      *) echo "extract: '$1' cannot be extracted" 1>&2
    esac
    done
}

compress() { # compress a file or folder
    case "$1" in
        tar.bz2|.tar.bz2) tar cvjf "${2%%/}.tar.bz2" "${2%%/}/"  ;;
        tbz2|.tbz2)       tar cvjf "${2%%/}.tbz2" "${2%%/}/"     ;;
        tbz|.tbz)         tar cvjf "${2%%/}.tbz" "${2%%/}/"      ;;
        tar.xz)           tar cvJf "${2%%/}.tar.gz" "${2%%/}/"   ;;
        tar.gz|.tar.gz)   tar cvzf "${2%%/}.tar.gz" "${2%%/}/"   ;;
        tgz|.tgz)         tar cvjf "${2%%/}.tgz" "${2%%/}/"      ;;
        tar|.tar)         tar cvf  "${2%%/}.tar" "${2%%/}/"      ;;
        rar|.rar)         rar a "${2}.rar" "$2"                  ;;
        zip|.zip)         zip -9 "${2}.zip" "$2"                 ;;
        7z|.7z)           7z a "${2}.7z" "$2"                    ;;
        lzo|.lzo)         lzop -v "$2"                           ;;
        gz|.gz)           gzip -v "$2"                           ;;
        bz2|.bz2)         bzip2 -v "$2"                          ;;
        xz|.xz)           xz -v "$2"                             ;;
        lzma|.lzma)       lzma -v "$2"                           ;;
        *)  echo "Usage: compress <archive type> <filename>"
            echo "Example: compress tar.bz2 PKGBUILD"
            echo "Please specify archive type and source."
            echo "Valid archive types are:"
            echo "tar.bz2, tar.gz, tar.gz, tar, bz2, gz, tbz2, tbz,"
            echo "tgz, lzo, rar, zip, 7z, xz and lzma."
    esac
}

list() { # list content of archive but don't unpack
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2|*.tbz2|*.tbz)  tar -jtf "$1"  ;;
            *.tar.gz)                tar -ztf "$1"  ;;
            *.tar|*.tgz|*.tar.xz)    tar -tf "$1"   ;;
            *.gz)                    gzip -l "$1"   ;;
            *.rar)                   rar vb "$1"    ;;
            *.zip)                   unzip -l "$1"  ;;
            *.7z)                    7z l "$1"      ;;
            *.lzo)                   lzop -l "$1"   ;;
            *.xz|*.txz|*.lzma|*.tlz) xz -l "$1"     ;;
        esac
    else
        echo "Sorry, '$1' is not a valid archive."
        echo "Valid archive types are:"
        echo "tar.bz2, tar.gz, tar.xz, tar, gz,"
        echo "tbz2, tbz, tgz, lzo, rar"
        echo "zip, 7z, xz and lzma"
    fi
}

extract_dir() {
    for FILE in $(find -type -f *); do
        extract $FILE
    done
}

sizeofdir() { # show size of all directories in current working directory
    du -shx * .[a-zA-Z0-9_]* 2> /dev/null | \
        grep '^ *[0-9.]*[MG]' | sort -n > /tmp/list
        grep '^ *[0-9.]*M' /tmp/list
        grep '^ *[0-9.]*G' /tmp/list
    rm /tmp/list
}

start()   { for arg in $* ;do sudo systemctl start   $arg ;done ;}
stop()    { for arg in $* ;do sudo systemctl stop    $arg ;done ;}
restart() { for arg in $* ;do sudo systemctl restart $arg ;done ;}

rtorrent_start() {
    dtach -n ~/.rtorrent/rtorrent.dtach rtorrent
    [[ ! -z $(pgrep -u "$USER" "rtorrent") ]] &&
        echo "rtorrent start successfully" || echo "rtorrent failed to start"
}

rtorrent_resume() {
    dtach -a ~/.rtorrent/rtorrent.dtach
}

ddprogress() {
    local pid= t=0
    dd "$@" &
    pid=$!

    while kill -0 "$pid"; do
        sleep 5s
        (( t += 5 ))
        (( ! t % 60 )) &&
            kill -USR1 "$pid" || break
    done
}

deps() {
  local bin dir
  if [[ -f "$1" ]]; then
    bin=$1
  elif bin=$(type -P $1); then
    :
  else
    # maybe its a lib?
    for dir in /lib /usr/lib; do
      if [[ -f $dir/$1 ]]; then
        bin=$dir/$1
        break
      fi
    done
  fi

  if [ $bin && $1 != $bin ]; then
    printf '%s => %s\n\n' "$1" "$bin"
  fi

  [[ -z $bin ]] && { echo "error: binary not found: $1"; return 1; }
  objdump -p "$bin" | awk '/NEEDED/ { print $2 }'
}

depscan() {
  [[ -z $1 ]] && { echo "usage: depscan <package>"; return; }
  while read elfobj; do
    objdump -p "$elfobj" | awk '/NEEDED/ { print $2 }'
  done < <(file $(pacman -Qlq $1) | sed -n '/ELF/s/^\(.*\):.*/\1/p') | nl
}

scrot() {
    ( cd ~/Pictures && /usr/bin/scrot $*; ) 
}

mktar() { tar cvf  "${1%%/}.tar"     "${1%%/}/"; }
mktgz() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }
mktbz() { tar cvjf "${1%%/}.tar.bz2" "${1%%/}/"; }

alias sudo='sudo '
alias gst='git status --short --untracked-files'
alias pacman='sudo pacman-color'
alias backup='~/rsync.sh'
alias ccopt='gcc -c -Q -O3 --help=optimizers | grep enabled'
alias findcpu='echo "" | gcc -march=native -v -E - 2>&1 | grep cc1'
alias ns='netstat -alnp --protocol=inet'
alias ports='netstat -nape --inet'
alias ping='ping -c 4'
alias nsw="sudo watch -n 3 -d -t netstat -vantp"    # watch incoming connections
alias openports="netstat --all --numeric --programs --inet"
alias chfile='chmod 644'
alias chdir='chmod 755'
alias syntaxcheck='for file in $(find $1 -iname "*.sh"); do bash -n $file ;done'
alias ls='ls -Alh --group-directories-first --color=auto'
alias df='df -h'
alias du='du -h'
alias free='free -m'
alias cp='cp -iv'
alias mv='mv -iv'
alias rm='rm -Iv'
alias ln='ln -iv'
alias .='cd ../'
alias ..='cd ../../'
alias ...='cd ../../../'
alias ....='cd ../../../../'
alias install='install -v'
alias mount='mount -v'
alias umount='umount -v'
alias chown='chown -c --preserve-root'
alias chmod='chmod -c --preserve-root'
alias chgrp='chgrp -c --preserve-root'
alias rmdir='rmdir -v'
alias mkdir='mkdir -vp'
alias diff='colordiff -Nuar'
alias p=pacman
alias ll='ls -l'
alias rr='rm -r'
alias dirs='dirs -p'
alias ncmpc=ncmpcpp
alias gparted='sudo -b gparted &>/dev/null'
alias zenmap='sudo -b zenmap &>/dev/null'
alias mountiso='sudo mount -t iso9660 -o loop'
alias blank="sleep 1 && xset dpms force off"
alias lesslast="less !:*"

alias installedby='sudo pacman -Ql'
alias whatfrom='sudo pacman -Qo'
alias showorphan='sudo pacman -Qdt'
alias removeorphan='sudo pacman -Rsnc $(pacman -Qdqt)'
alias giveswhat='sudo pkgfile --list'
alias e='subl'
alias reload='source ~/.zshrc'
